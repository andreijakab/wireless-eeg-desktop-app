/**
 * \ingroup		grp_drivers
 *
 * \file		sigproc.cpp
 * \since		15.11.2010
 * \author		Andrei Jakab (andrei.jakab@tut.fi)
 * \version		1.0.0
 *
 * \brief		Module that contains all of the signal processing functions of the software.
 *
 * $Id: sigproc.cpp 76 2013-02-14 14:26:17Z jakab $
 */

//----------------------------------------------------------------------------------------------------------
//   								Includes
//----------------------------------------------------------------------------------------------------------
// Windows libaries
# include <tchar.h>

// CRT libraries
# include <math.h>
# include <stdio.h> // for fopen_s, fclose

# include "globals.h"
# include "sigproc.h"

//----------------------------------------------------------------------------------------------------------
//   								Constants
//----------------------------------------------------------------------------------------------------------
// LP Filters
double m_dblLP5[LP_FILTER_BUFFER_LENGTH] = {-0.000843387023749,-0.001300989309962,-0.001751410272413,-0.002092574119456,
											   -0.002192670862375,-0.001897597049439,-0.001042689837838, 0.000531979775117,
											   0.002964037700551, 0.006350688221468,  0.01073204274558,  0.01607793827027,
											   0.02228008587286,  0.02915094666019,  0.03643008811905,  0.04379799526961,
											   0.0508964867986,  0.05735411483741,  0.06281430416929,  0.06696359323677,
											   0.0695572301765,  0.07043957324394,   0.0695572301765,  0.06696359323677,
											   0.06281430416929,  0.05735411483741,   0.0508964867986,  0.04379799526961,
											   0.03643008811905,  0.02915094666019,  0.02228008587286,  0.01607793827027,
											   0.01073204274558, 0.006350688221468, 0.002964037700551, 0.000531979775117,
											   -0.001042689837838,-0.001897597049439,-0.002192670862375,-0.002092574119456,
											   -0.001751410272413,-0.001300989309962,-0.000843387023749};

double m_dblLP10[LP_FILTER_BUFFER_LENGTH] = {0.0008432602304375, 0.001297581233112, 0.001563708579746, 0.001379297264544,
												0.0004876405082825,-0.001278580760133,-0.003907529023843,-0.007134655802322,
												-0.0104086091221, -0.01291502025553,  -0.0136662090574, -0.01165070551985,
												-0.006021562954952, 0.003709720821943,   0.0175129954931,  0.03475027556219,
												0.05418437580602,  0.07409475636124,   0.0924890541351,   0.1073787591515,
												0.1170728335317,   0.1204372276345,   0.1170728335317,   0.1073787591515,
												0.0924890541351,  0.07409475636124,  0.05418437580602,  0.03475027556219,
												0.0175129954931, 0.003709720821943,-0.006021562954952, -0.01165070551985,
												-0.0136662090574, -0.01291502025553,  -0.0104086091221,-0.007134655802322,
												-0.003907529023843,-0.001278580760133,0.0004876405082825, 0.001379297264544,
												0.001563708579746, 0.001297581233112,0.0008432602304375};

double m_dblLP15[LP_FILTER_BUFFER_LENGTH] = {-0.0008203145808623,-0.001290870758748, -0.00133515053486,-0.0005337124432149,
												0.001311129397198, 0.003940926674519, 0.006532082506742, 0.007816073574438,
												0.006460959507429, 0.001639347551042,-0.006394953253516, -0.01595289078483,
												-0.0239810176873, -0.02664334615145, -0.02032751780685,-0.002817217836253,
												0.02573135884606,   0.0623597926971,   0.1016385867768,   0.1367474926508,
												0.1610507200472,   0.1697370432169,   0.1610507200472,   0.1367474926508,
												0.1016385867768,   0.0623597926971,  0.02573135884606,-0.002817217836253,
												-0.02032751780685, -0.02664334615145,  -0.0239810176873, -0.01595289078483,
												-0.006394953253516, 0.001639347551042, 0.006460959507429, 0.007816073574438,
												0.006532082506742, 0.003940926674519, 0.001311129397198,-0.0005337124432149,
												-0.00133515053486,-0.001290870758748,-0.0008203145808623};

double m_dblLP20[LP_FILTER_BUFFER_LENGTH] = {0.0007829754012824,   0.0012932564967, 0.001083802759082,-0.0003576425617034,
												-0.002826783071597,-0.005114018857612,-0.005360327009312,-0.002094450550035,
												0.004496647464976,  0.01185693049404,  0.01562514060661,  0.01161187463273,
												-0.001515288388957, -0.02019428285254, -0.03594573750996, -0.03795241462699,
												-0.0175468929413,  0.02723893976986,   0.0892752339135,   0.1535690376208,
												0.2020411643873,   0.2200656696462,   0.2020411643873,   0.1535690376208,
												0.0892752339135,  0.02723893976986,  -0.0175468929413, -0.03795241462699,
												-0.03594573750996, -0.02019428285254,-0.001515288388957,  0.01161187463273,
												0.01562514060661,  0.01185693049404, 0.004496647464976,-0.002094450550035,
												-0.005360327009312,-0.005114018857612,-0.002826783071597,-0.0003576425617034,
												0.001083802759082,   0.0012932564967,0.0007829754012824};

double m_dblLP25[LP_FILTER_BUFFER_LENGTH] = {-0.0007249049475628,-0.001293371136189,-0.0008033717961146, 0.001215083108096,
												0.003724141835866, 0.004326829699989, 0.001036584182461,-0.005368820524462,
												-0.01055670657141,-0.008971158547343, 0.001518285712582,   0.0159837910496,
												0.023553339508,  0.01421309397771, -0.01227404824858, -0.04179701943131,
												-0.05059845338827, -0.01840314449974,  0.05726827644799,   0.1551191928998,
												0.2377801128676,   0.2701045356026,   0.2377801128676,   0.1551191928998,
												0.05726827644799, -0.01840314449974, -0.05059845338827, -0.04179701943131,
												-0.01227404824858,  0.01421309397771,    0.023553339508,   0.0159837910496,
												0.001518285712582,-0.008971158547343, -0.01055670657141,-0.005368820524462,
												0.001036584182461, 0.004326829699989, 0.003724141835866, 0.001215083108096,
												-0.0008033717961146,-0.001293371136189,-0.0007249049475628};

double m_dblLP30[LP_FILTER_BUFFER_LENGTH] = {0.0006481776410961, 0.001291900445527,0.0005024910482424,-0.001951329770492,
												-0.003805103991983,-0.001884340213121, 0.003890421931201, 0.008396504739808,
												0.005082457083414,-0.006306321566133, -0.01608324105675, -0.01159969893808,
												0.008874428253303,  0.02894729471601,  0.02477611632723, -0.01116685207214,
												-0.05394715757142, -0.05695343224108,  0.01275514788347,   0.1413107206567,
												0.2673418759064,   0.3197598815778,   0.2673418759064,   0.1413107206567,
												0.01275514788347, -0.05695343224108, -0.05394715757142, -0.01116685207214,
												0.02477611632723,  0.02894729471601, 0.008874428253303, -0.01159969893808,
												-0.01608324105675,-0.006306321566133, 0.005082457083414, 0.008396504739808,
												0.003890421931201,-0.001884340213121,-0.003805103991983,-0.001951329770492,
												0.0005024910482424, 0.001291900445527,0.0006481776410961};

double m_dblLP40[LP_FILTER_BUFFER_LENGTH] = {0.0004506573306629, 0.001291627020699,-0.0001268447083631,-0.002799457720411,
												-0.001648999909928, 0.003943235482643, 0.005353573109956,-0.003096415432533,
												-0.01046450388547,-0.001640307969556,  0.01498021447524,  0.01159724391478,
												-0.01536321387, -0.02665895526553, 0.006780539463844,  0.04480462884054,
												0.01752478422503, -0.06239632643849, -0.07417134689537,  0.07522161334966,
												0.3066202447874,   0.4195960201904,   0.3066202447874,  0.07522161334966,
												-0.07417134689537, -0.06239632643849,  0.01752478422503,  0.04480462884054,
												0.006780539463844, -0.02665895526553,    -0.01536321387,  0.01159724391478,
												0.01498021447524,-0.001640307969556, -0.01046450388547,-0.003096415432533,
												0.005353573109956, 0.003943235482643,-0.001648999909928,-0.002799457720411,
												-0.0001268447083631, 0.001291627020699,0.0004506573306629};

double m_dblLP50[LP_FILTER_BUFFER_LENGTH] = {0.0002091910178467, 0.001291814089953,-0.0007437653768171,-0.002579074440309,
												0.001866053228488, 0.004321620774482,-0.003890161880496,-0.006481976340636,
												0.007221426452303, 0.008960358469729, -0.01241602205217, -0.01159892356976,
												0.02035296664268,  0.01419598330942, -0.03274661685379, -0.01652868835842,
												0.05394355153675,  0.01838098956982, -0.09996057142865, -0.01957252012145,
												0.3159868279041,   0.5195750748538,   0.3159868279041, -0.01957252012145,
												-0.09996057142865,  0.01838098956982,  0.05394355153675, -0.01652868835842,
												-0.03274661685379,  0.01419598330942,  0.02035296664268, -0.01159892356976,
												-0.01241602205217, 0.008960358469729, 0.007221426452303,-0.006481976340636,
												-0.003890161880496, 0.004321620774482, 0.001866053228488,-0.002579074440309,
												-0.0007437653768171, 0.001291814089953,0.0002091910178467};

double m_dblLP60[LP_FILTER_BUFFER_LENGTH] = {-5.28339936494e-005, 0.001292214091243,-0.001288261514646,-0.001373592123386,
												0.003844105805995,-0.001273292209285,-0.005356006416959, 0.007105144964075,
												0.001977335623565, -0.01286160028906, 0.008636966814019,  0.01160251509615,
												-0.02335543375379, 0.003694376427742,  0.03172425554896, -0.03460653915926,
												-0.01753274959308,  0.07378828069788, -0.04334202649836,  -0.1069346119802,
												0.2944691623074,   0.6196851803093,   0.2944691623074,  -0.1069346119802,
												-0.04334202649836,  0.07378828069788, -0.01753274959308, -0.03460653915926,
												0.03172425554896, 0.003694376427742, -0.02335543375379,  0.01160251509615,
												0.008636966814019, -0.01286160028906, 0.001977335623565, 0.007105144964075,
												-0.005356006416959,-0.001273292209285, 0.003844105805995,-0.001373592123386,
												-0.001288261514646, 0.001292214091243,-5.28339936494e-005};

double m_dblLP70[LP_FILTER_BUFFER_LENGTH] = {-0.0003098651075694, 0.001292685865363,-0.001707046335446,0.0003574847569263,
												0.002653354722156,-0.005111762368334, 0.003892787140196,  0.00209352640303,
												-0.009551645889078,  0.01185169878934,-0.004010084057831,  -0.0116067510555,
												0.02407419216011, -0.02018537240774,-0.004538999023515,  0.03793566865497,
												-0.05397995512001,  0.02722692096875,  0.04905781953772,  -0.1535012774313,
												0.2441180527554,   0.7198971340847,   0.2441180527554,  -0.1535012774313,
												0.04905781953772,  0.02722692096875, -0.05397995512001,  0.03793566865497,
												-0.004538999023515, -0.02018537240774,  0.02407419216011,  -0.0116067510555,
												-0.004010084057831,  0.01185169878934,-0.009551645889078,  0.00209352640303,
												0.003892787140196,-0.005111762368334, 0.002653354722156,0.0003574847569263,
												-0.001707046335446, 0.001292685865363,-0.0003098651075694};

double m_dblLP80[LP_FILTER_BUFFER_LENGTH] = {-0.0005367292775325, 0.001293129415345,-0.001958935160914, 0.001953186047731,
												-0.0007265529114107,-0.001886132763977,  0.00535980027883,-0.008404492236783,
												0.009253749732241,-0.006312320696247,-0.001012834341243,  0.01161073359631,
												-0.02243556958831,  0.02897483193967, -0.02640898279287,   0.0111774749682,
												0.01754516870258, -0.05700761137655,   0.1010634411714,  -0.1414451478962,
												0.1698217093682,    0.820164167643,   0.1698217093682,  -0.1414451478962,
												0.1010634411714, -0.05700761137655,  0.01754516870258,   0.0111774749682,
												-0.02640898279287,  0.02897483193967, -0.02243556958831,  0.01161073359631,
												-0.001012834341243,-0.006312320696247, 0.009253749732241,-0.008404492236783,
												0.00535980027883,-0.001886132763977,-0.0007265529114107, 0.001953186047731,
												-0.001958935160914, 0.001293129415345,-0.0005367292775325};

double * m_dblLPFilterPointers[NLPFILTERS] = {m_dblLP5 , m_dblLP10, m_dblLP15, m_dblLP20,
												   m_dblLP25, m_dblLP30, m_dblLP40, m_dblLP50,
												   m_dblLP60, m_dblLP70, m_dblLP80};

const float m_fltLPCutOffFrequencies[NLPFILTERS] = {5, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80};

// aEEG filters
double m_dblMA[4] = {0.25, 0.25, 0.25, 0.25};

double m_dblAR[12] = {1, -0.477306966124704, -0.329559599238338,
					 -0.122772406620259, -0.0374999246874442, 0.00559106256029946,
					  0.0161577927509069, 0.0134428509405436, 0.00661077169011933,
					  0.00628855018429612, 0.00193381043247495, -0.000763665512854537};

double m_dblBP[299] = { 0.0003340326743267,0.0004751593869308,0.0004718730150497,0.0003214763033752,
						9.284306425212e-005,-0.0001007033633219,-0.0001525250517476,-1.493897785535e-005,
						0.0002727332737862,0.0005959766400206,0.0008142630560628,0.0008267459841384,
						0.000623955939773,0.0002994059752542,1.243667381349e-005,-8.343798057121e-005,
						8.530388194958e-005,0.0004710557613481,0.0009191567361912, 0.001234341777039,
						0.001271328173614, 0.001007730641225,0.0005631198028988,0.0001514407920853,
						-1.488064190773e-005,0.0001735547981477,0.0006641837414891, 0.001257041700657,
						0.001690572175721, 0.001762229689957, 0.001428511972036, 0.000835439189579,
						0.0002606767554411,-1.050515164557e-005,0.0001796380069853, 0.000778756377537,
						0.001536792359825, 0.002113008996079, 0.002232299518367,   0.0018193597757,
						0.001045734764913,0.0002624535612357,-0.0001562311223498,1.115210145198e-005,
						0.0007199098591328, 0.001665626040271,  0.00241394227292, 0.002598908922161,
						0.002099679379387, 0.001110730821417,6.669038116172e-005,-0.000550382907915,
						-0.0004363046828875,0.0003821751381602,   0.0015426936191, 0.002500895918299,
						0.002777948430976, 0.002189846285045,0.0009492816964067,-0.0004145250234475,
						-0.001289427705582,  -0.0012648937526,-0.0003357790823398, 0.001074853114046,
						0.002293687492401, 0.002701977958263, 0.002029821117668,0.0005006337863653,
						-0.001249673644431,-0.002451861345991,-0.002559100471178,-0.001515470504217,
						0.0001935362744749, 0.001742978233711, 0.002340165731196, 0.001599412618264,
						-0.0002564196189772,-0.002470915544494,-0.004083869025768,-0.004373111924278,
						-0.003206021957931,-0.001130929655917,0.0008473233191344, 0.001717625831673,
						0.0009380161808898,-0.001286023972411,-0.004060977619462,-0.006191198659261,
						-0.006726136753213,-0.005419720159264, -0.00288161039699,-0.0003337778751285,
						0.0009331296719945,0.0001634246203518,-0.002480503851035,-0.005946859380113,
						-0.008742648627215, -0.00961268030653,-0.008142526314878,-0.004998300230307,
						-0.001671412033979,0.0001783193831662,-0.0005055376540417,-0.003645373767864,
						-0.008002361325435,   -0.011693465194,  -0.0130405569406,  -0.0113720440233,
						-0.007398162939356,-0.002959055606006,-0.0002268040993269,-0.0007030194852809,
						-0.00446965139602, -0.01005990216055, -0.01504861302248, -0.01713126852529,
						-0.01521772017783, -0.01002924303215, -0.00388584517711,0.0002722876838337,
						0.0002250791790531,-0.004426375733209, -0.01193034161043, -0.01903864526054,
						-0.0224151062487, -0.02020094637712, -0.01302033112464,-0.003910851553696,
						0.002881770214399, 0.003786608753764,-0.002341923333696, -0.01342791853382,
						-0.024793594727, -0.03105489214151, -0.02856091145812, -0.01732614962899,
						-0.001523096341938,   0.0118564442252,  0.01580031428146, 0.006490967995237,
						-0.01439628987778, -0.03939545260551, -0.05731297240512, -0.05708130372846,
						-0.03206092645027,  0.01683888744864,   0.0805110710099,   0.1439003091591,
						0.1905063659538,   0.2076274705443,   0.1905063659538,   0.1439003091591,
						0.0805110710099,  0.01683888744864, -0.03206092645027, -0.05708130372846,
						-0.05731297240512, -0.03939545260551, -0.01439628987778, 0.006490967995237,
						0.01580031428146,   0.0118564442252,-0.001523096341938, -0.01732614962899,
						-0.02856091145812, -0.03105489214151,   -0.024793594727, -0.01342791853382,
						-0.002341923333696, 0.003786608753764, 0.002881770214399,-0.003910851553696,
						-0.01302033112464, -0.02020094637712,  -0.0224151062487, -0.01903864526054,
						-0.01193034161043,-0.004426375733209,0.0002250791790531,0.0002722876838337,
						-0.00388584517711, -0.01002924303215, -0.01521772017783, -0.01713126852529,
						-0.01504861302248, -0.01005990216055, -0.00446965139602,-0.0007030194852809,
						-0.0002268040993269,-0.002959055606006,-0.007398162939356,  -0.0113720440233,
						-0.0130405569406,   -0.011693465194,-0.008002361325435,-0.003645373767864,
						-0.0005055376540417,0.0001783193831662,-0.001671412033979,-0.004998300230307,
						-0.008142526314878, -0.00961268030653,-0.008742648627215,-0.005946859380113,
						-0.002480503851035,0.0001634246203518,0.0009331296719945,-0.0003337778751285,
						-0.00288161039699,-0.005419720159264,-0.006726136753213,-0.006191198659261,
						-0.004060977619462,-0.001286023972411,0.0009380161808898, 0.001717625831673,
						0.0008473233191344,-0.001130929655917,-0.003206021957931,-0.004373111924278,
						-0.004083869025768,-0.002470915544494,-0.0002564196189772, 0.001599412618264,
						0.002340165731196, 0.001742978233711,0.0001935362744749,-0.001515470504217,
						-0.002559100471178,-0.002451861345991,-0.001249673644431,0.0005006337863653,
						0.002029821117668, 0.002701977958263, 0.002293687492401, 0.001074853114046,
						-0.0003357790823398,  -0.0012648937526,-0.001289427705582,-0.0004145250234475,
						0.0009492816964067, 0.002189846285045, 0.002777948430976, 0.002500895918299,
						0.0015426936191,0.0003821751381602,-0.0004363046828875,-0.000550382907915,
						6.669038116172e-005, 0.001110730821417, 0.002099679379387, 0.002598908922161,
						0.00241394227292, 0.001665626040271,0.0007199098591328,1.115210145198e-005,
						-0.0001562311223498,0.0002624535612357, 0.001045734764913,   0.0018193597757,
						0.002232299518367, 0.002113008996079, 0.001536792359825, 0.000778756377537,
						0.0001796380069853,-1.050515164557e-005,0.0002606767554411, 0.000835439189579,
						0.001428511972036, 0.001762229689957, 0.001690572175721, 0.001257041700657,
						0.0006641837414891,0.0001735547981477,-1.488064190773e-005,0.0001514407920853,
						0.0005631198028988, 0.001007730641225, 0.001271328173614, 0.001234341777039,
						0.0009191567361912,0.0004710557613481,8.530388194958e-005,-8.343798057121e-005,
						1.243667381349e-005,0.0002994059752542, 0.000623955939773,0.0008267459841384,
						0.0008142630560628,0.0005959766400206,0.0002727332737862,-1.493897785535e-005,
						-0.0001525250517476,-0.0001007033633219,9.284306425212e-005,0.0003214763033752,
						0.0004718730150497,0.0004751593869308,0.0003340326743267};
#ifdef _DEBUG
FILE * m_pflDebug;
double temp = 0.0;
#endif

//----------------------------------------------------------------------------------------------------------
//   								Module Variables
//----------------------------------------------------------------------------------------------------------
static int						m_intFilterBufferIndex;
static double					m_dblFilterBuffer [EEGCHANNELS][LP_FILTER_BUFFER_LENGTH];

static struct FIR_Filter		m_EEGFilters[EEGCHANNELS];

// aEEG
struct FIR_Filter				m_AEEG_MA[EEGCHANNELS], m_AEEG_AR[EEGCHANNELS], m_AEEG_BP[EEGCHANNELS];
struct LocalMax					m_LocalMax[EEGCHANNELS];

//----------------------------------------------------------------------------------------------------------
//   								Locally-accessible Code
//----------------------------------------------------------------------------------------------------------
double sp_filter_FIR(struct FIR_Filter * pFilter,
					 double dblNewSample)
{
	double dblValue;
	unsigned int j;

	// insert new sample
	pFilter->Buffer[pFilter->BufferID] = dblNewSample;

	// initialize output sample
	dblValue = 0.0;
		
	// perform FIR filtering
	for(j = 0; j < pFilter->Order; j++)
	{
		dblValue += pFilter->Buffer[pFilter->BufferID]*pFilter->Coefficients[j];
		
		// compute index of next-oldest sample
		pFilter->BufferID = (pFilter->BufferID + 1)%pFilter->Order;
	}

	// update the filter buffer index for the next iteration so that it points to the oldest sample
	if(pFilter->BufferID == 0)
		pFilter->BufferID = pFilter->Order - 1;
	else
		pFilter->BufferID--;

	return dblValue;
}

//----------------------------------------------------------------------------------------------------------
//   								Globally-accessible Code
//----------------------------------------------------------------------------------------------------------

BOOL sp_init(void)
{
	BOOL blnErrorOccured = FALSE;

#ifdef _DEBUG
	TCHAR strBuffer[MAX_PATH + 1];
#endif
	unsigned int i, j;

	m_intFilterBufferIndex = 0;

	// Initialize buffers
	for (i = 0; i < EEGCHANNELS; i++)
	{
		for (j = 0; j < LP_FILTER_BUFFER_LENGTH; j++)
			m_dblFilterBuffer [i][j] = 0.0;
	}

	// initialize LP & aEEG filters
	for(i = 0; i < EEGCHANNELS; i++)
	{
		// LP
		m_EEGFilters[i].Coefficients = 0;
		m_EEGFilters[i].Order = LP_FILTER_BUFFER_LENGTH;
		m_EEGFilters[i].BufferID = 0;
		m_EEGFilters[i].Buffer = (double *) malloc(m_EEGFilters[i].Order*sizeof(double));
		if(m_EEGFilters[i].Buffer == NULL)
		{
			blnErrorOccured = TRUE;
			break;
		}
		else
		{
			for(j = 0; j < m_EEGFilters[i].Order; j++)
				m_EEGFilters[i].Buffer[j] = 0.0;
		}

		// aEEG
		m_AEEG_AR[i].Order = 12;
		m_AEEG_AR[i].Coefficients = m_dblAR;
		m_AEEG_AR[i].BufferID = 0;
		m_AEEG_AR[i].Buffer = (double *) malloc(m_AEEG_AR[i].Order*sizeof(double));
		if(m_AEEG_AR[i].Buffer == NULL)
		{
			blnErrorOccured = TRUE;
			break;
		}
		else
		{
			for(j = 0; j < m_AEEG_AR[i].Order; j++)
				m_AEEG_AR[i].Buffer[j] = 0.0;
		}

		m_AEEG_BP[i].Order = 299;
		m_AEEG_BP[i].Coefficients = m_dblBP;
		m_AEEG_BP[i].BufferID = 0;
		m_AEEG_BP[i].Buffer = (double *) malloc(m_AEEG_BP[i].Order*sizeof(double));
		if(m_AEEG_BP[i].Buffer == NULL)
		{
			blnErrorOccured = TRUE;
			break;
		}
		else
		{
			for(j = 0; j < m_AEEG_BP[i].Order; j++)
				m_AEEG_BP[i].Buffer[j] = 0.0;
		}

		m_AEEG_MA[i].Order = 4;
		m_AEEG_MA[i].Coefficients = m_dblMA;
		m_AEEG_MA[i].BufferID = 0;
		m_AEEG_MA[i].Buffer = (double *) malloc(m_AEEG_MA[i].Order*sizeof(double));
		if(m_AEEG_MA[i].Buffer == NULL)
		{
			blnErrorOccured = TRUE;
			break;
		}
		else
		{
			for(j = 0; j < m_AEEG_MA[i].Order; j++)
				m_AEEG_MA[i].Buffer[j] = 0.0;
		}

		// aEEG local max
		m_LocalMax[i].Value = 0.0;
		m_LocalMax[i].Count = 0;
	}

	// release memory if error has occured
	if(blnErrorOccured)
		sp_cleanup();

#ifdef _DEBUG
	m_pflDebug = NULL;
	if(GetTempPath(sizeof(strBuffer)/sizeof(TCHAR),strBuffer))
	{
		_tcscat_s(strBuffer, sizeof(strBuffer)/sizeof(TCHAR), TEXT("\\debug-aEEG-EEGEM.csv"));
		_tfopen_s(&m_pflDebug, strBuffer, TEXT("w"));
	}
#endif

	return !blnErrorOccured;
}

void sp_cleanup(void)
{
	unsigned int i;

	for(i = 0; i < EEGCHANNELS; i++)
	{
		if(m_EEGFilters[i].Buffer != NULL)
			free(m_EEGFilters[i].Buffer);
		if(m_AEEG_AR[i].Buffer != NULL)
			free(m_AEEG_AR[i].Buffer);
		if(m_AEEG_BP[i].Buffer != NULL)
			free(m_AEEG_BP[i].Buffer);
		if(m_AEEG_MA[i].Buffer != NULL)
			free(m_AEEG_MA[i].Buffer);
	}

#ifdef _DEBUG
	if(m_pflDebug)
		fclose(m_pflDebug);
#endif
}

void sp_FilterAEEGSignal(short ** pshrSampleBuffer,
						 double ** pdblDisplayBuffer,
						 unsigned int uintDisplayBufferLength,
						 unsigned int * puintDisplayBufferID,
						 unsigned int uintNNewSamples)
{
	double dblNewSample, dblOutput;
	unsigned int i, k, n;

	for (n = 0; n < EEGCHANNELS; n++)
	{
		k = * puintDisplayBufferID;
		for(i = 0; i < uintNNewSamples; i++)
		{
			// convert from quantized int16 data to voltages
			dblNewSample = ((double) pshrSampleBuffer[n][i])*((double) WEEG_LSB_UV);

			// initialize output variable
			dblOutput = 0.0;

			//
			// Asymmetric Bandpass Filtering
			//
			// filter the data using the AR parameters
			dblOutput = sp_filter_FIR(&(m_AEEG_AR[n]), dblNewSample);

			// filter data with BP filter
			dblOutput = sp_filter_FIR(&(m_AEEG_BP[n]), dblOutput);

			//
			// Rectifcation
			//
			dblOutput = fabs(dblOutput)*2;

			//
			// Amplitude and Time Compression
			//
			// amplitude compression
			if(dblOutput > 10.0)
			{
				if(dblOutput > 100.0)
					dblOutput = 100.0;

				dblOutput = 10*log10(dblOutput);
			}

			// time compression
			if(dblOutput > m_LocalMax[n].Value)
				m_LocalMax[n].Value = dblOutput;
			
			m_LocalMax[n].Count = m_LocalMax[n].Count + 1;
			if(m_LocalMax[n].Count == AEEG_TIME_INTERVAL)
			{
				pdblDisplayBuffer[n][k] = m_LocalMax[n].Value;
				//dblDisplayBuffer[n][k] = sp_filter_FIR(&(m_AEEG_MA[n]), dblDisplayBuffer[n][k]);		// NOTE: was removed since its presence is questionable
				k = (++k)%uintDisplayBufferLength;

				m_LocalMax[n].Value = 0.0;
				m_LocalMax[n].Count = 0;
			}

#ifdef _DEBUG
			// OUTPUT DEBUG FORMAT: Input;Amplitude Compression;Output
			if(n == 0)
			{
				if(k > 0)
					temp = pdblDisplayBuffer[n][k - 1];
				_ftprintf(m_pflDebug, TEXT("%d;%f;%f\n"), pshrSampleBuffer[n][i], dblOutput, temp);
			}
#endif
		}
	}
		
	// update display buffer ID to the new value
	* puintDisplayBufferID = k;
}

/**
 * \brief Filters the EEG signals using low-pass and high-pass FIR filters whose cut off frequencies are selected by the user.
 *
 * This function applies two FIR filters to all the EEG signals. The new signals samples are copied one by one from the \e shrSampleBuffer
 * buffer to the \e shrFilterBuffer. Then a low-pass FIR filter and a high-pass FIR filter are applied to the signals and the output
 * sample is stored in the \e shrDisplayBuffer buffer. This process is repeated for each sample present in the \e shrSampleBuffer buffer.
 *
 * \param[in]	pshrSampleBuffer		Pointer to temporary buffer where signal samples are stored while awaiting processing by this function.
 * \param[out]	pdblDisplayBuffer		Pointer to circular output buffer where the signal samples that have been processed are stored
 * \param[in]	uintDisplayBufferLength
 * \param[in]	uintNNewSamples			
 * \param[in]	intLPFilterIndex		Index of the low-pass filter selected by the user
 *
 * \return Index of the oldest sample in \e shrDisplayBuffer.
 */
void sp_FilterEEGSignal(short ** pshrSampleBuffer,
						double ** pdblDisplayBuffer,
						unsigned int uintDisplayBufferLength,
						unsigned int * puintDisplayBufferID,
						unsigned int uintNNewSamples,
						int intLPFilterIndex)
{
	int m, n;
	unsigned int i, j;

	// variable initialization
	m = 0;

	if(intLPFilterIndex < 0)
	{
		for (i=0; i<EEGCHANNELS; i++)
		{
			m = *puintDisplayBufferID;

			for(j=0;j<uintNNewSamples;j++)
			{
				pdblDisplayBuffer[i][m] = pshrSampleBuffer [i][j];
				m = (++m)%uintDisplayBufferLength;
			}
		}
	}
	else
	{
		for (n = 0; n < EEGCHANNELS; n++)
		{
			m = *puintDisplayBufferID;

			// set appropriate filter coefficients
			m_EEGFilters[n].Coefficients = m_dblLPFilterPointers[intLPFilterIndex];
			
			// filter each sample individually
			for(i = 0; i < uintNNewSamples; i++)
			{
				// insert new sample
				m_EEGFilters[n].Buffer[m_EEGFilters[n].BufferID] = pshrSampleBuffer[n][i];

				// initialize output sample
				pdblDisplayBuffer[n][m] = 0.0;
				
				// perform FIR filtering
				for(j = 0; j < LP_FILTER_BUFFER_LENGTH; j++)
				{
					pdblDisplayBuffer[n][m] += m_EEGFilters[n].Buffer[m_EEGFilters[n].BufferID]*m_EEGFilters[n].Coefficients[j];
					
					// compute index of next-oldest sample
					m_EEGFilters[n].BufferID = (m_EEGFilters[n].BufferID + 1)%m_EEGFilters[n].Order;
				}
				
				m = (++m)%uintDisplayBufferLength;

				// update the filter buffer index for the next iteration so that it points to the oldest sample
				if(m_EEGFilters[n].BufferID == 0)
					m_EEGFilters[n].BufferID = m_EEGFilters[n].Order - 1;
				else
					m_EEGFilters[n].BufferID--;
			}
		}
	}

	*puintDisplayBufferID = m;
}

void sp_FilterAllPass(short ** pshrSampleBuffer,
					  double ** pdblDisplayBuffer,
					  unsigned int uintDisplayBufferLength,
					  unsigned int * puintDisplayBufferID,
					  unsigned int uintNNewSamples)
{
	int m;
	unsigned int i, j;

	// variable initialization
	m = 0;

	for (i = 0; i < EEGCHANNELS; i++)
	{
		m = *puintDisplayBufferID;

		for(j = 0; j < uintNNewSamples;j++)
		{
			pdblDisplayBuffer[i][m] = pshrSampleBuffer [i][j];
			m = (++m)%uintDisplayBufferLength;
		}
	}

	*puintDisplayBufferID = m;
}

void sp_GetLPFiltersFc(float * pfltLPCutOffFrequenciesBuffer, unsigned int uintLPCutOffFrequenciesBufferLength)
{
	unsigned i;

	for(i = 0; i < uintLPCutOffFrequenciesBufferLength; i++)
	{
		pfltLPCutOffFrequenciesBuffer[i] = m_fltLPCutOffFrequencies[i];
	}
}